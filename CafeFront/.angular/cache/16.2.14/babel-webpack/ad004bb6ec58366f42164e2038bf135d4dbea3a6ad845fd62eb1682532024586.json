{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = environment.apiUrl;\n  }\n  // Tüm kullanıcıları getir\n  getAllUsers() {\n    return this.http.get(`${this.apiUrl}/User/GetAll`);\n  }\n  // Kullanıcıyı ID ile getir\n  getUserById(id) {\n    return this.http.get(`${this.apiUrl}/User/${id}`);\n  }\n  // Kullanıcıyı güncelle\n  updateUser(user) {\n    return this.http.put(`${this.apiUrl}/User/${user.id}`, user);\n  }\n  // Yeni kullanıcı oluştur\n  createUser(user) {\n    return this.http.post(`${this.apiUrl}/User`, user);\n  }\n  // Kullanıcıyı sil\n  deleteUser(id) {\n    return this.http.delete(`${this.apiUrl}/User/${id}`);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { UserService };","map":{"version":3,"names":["environment","UserService","constructor","http","apiUrl","getAllUsers","get","getUserById","id","updateUser","user","put","createUser","post","deleteUser","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\yusuf\\OneDrive\\Masaüstü\\Restorant-Menü\\Angular\\CafeFront\\src\\app\\admin\\components\\user\\user-list\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private apiUrl: string = environment.apiUrl;\n\n  constructor(private http: HttpClient) {}\n\n  // Tüm kullanıcıları getir\n  getAllUsers(): Observable<any[]> {\n    return this.http.get<any[]>(`${this.apiUrl}/User/GetAll`);\n  }\n\n  // Kullanıcıyı ID ile getir\n  getUserById(id: string): Observable<any> {\n    return this.http.get< any>(`${this.apiUrl}/User/${id}`);\n  }\n\n  // Kullanıcıyı güncelle\n  updateUser(user: any): Observable<void> {\n    return this.http.put<void>(`${this.apiUrl}/User/${user.id}`, user);\n  }\n\n  // Yeni kullanıcı oluştur\n  createUser(user: any): Observable<void> {\n    return this.http.post<void>(`${this.apiUrl}/User`, user);\n  }\n\n  // Kullanıcıyı sil\n  deleteUser(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/User/${id}`);\n  }\n}\n"],"mappings":"AAGA,SAASA,WAAW,QAAQ,8BAA8B;;;AAE1D,MAGaC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAWJ,WAAW,CAACI,MAAM;EAEJ;EAEvC;EACAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,cAAc,CAAC;EAC3D;EAEA;EACAG,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,MAAM,SAASI,EAAE,EAAE,CAAC;EACzD;EAEA;EACAC,UAAUA,CAACC,IAAS;IAClB,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAO,GAAG,IAAI,CAACP,MAAM,SAASM,IAAI,CAACF,EAAE,EAAE,EAAEE,IAAI,CAAC;EACpE;EAEA;EACAE,UAAUA,CAACF,IAAS;IAClB,OAAO,IAAI,CAACP,IAAI,CAACU,IAAI,CAAO,GAAG,IAAI,CAACT,MAAM,OAAO,EAAEM,IAAI,CAAC;EAC1D;EAEA;EACAI,UAAUA,CAACN,EAAU;IACnB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAO,GAAG,IAAI,CAACX,MAAM,SAASI,EAAE,EAAE,CAAC;EAC5D;EAAC,QAAAQ,CAAA,G;qBA5BUf,WAAW,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpB,WAAW;IAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEPvB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}